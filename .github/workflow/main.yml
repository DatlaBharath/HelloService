pipeline {
    agent any
    tools {
        // Your tool configuration, e.g., Maven, JDK, etc.
        // Assuming Maven:
        maven "Maven"
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'branch_name', url: 'repository_url'
            }
        }
        stage('Build') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    def app = "ratneshpuskar/repo_name_in_lowercase:${env.BUILD_NUMBER}"
                    sh "docker build -t $app ."
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub_credentials', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                    script {
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                        def app = "ratneshpuskar/repo_name_in_lowercase:${env.BUILD_NUMBER}"
                        sh "docker push $app"
                    }
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    def deploymentYaml = """
                    apiVersion: apps/v1
                    kind: Deployment
                    metadata:
                      name: project-deployment
                    spec:
                      replicas: 1
                      selector:
                        matchLabels:
                          app: project-app
                      template:
                        metadata:
                          labels:
                            app: project-app
                        spec:
                          containers:
                          - name: project-container
                            image: ratneshpuskar/repo_name_in_lowercase:${env.BUILD_NUMBER}
                            ports:
                            - containerPort: 80
                    """
                    def serviceYaml = """
                    apiVersion: v1
                    kind: Service
                    metadata:
                      name: project-service
                    spec:
                      type: NodePort
                      selector:
                        app: project-app
                      ports:
                      - protocol: TCP
                        port: 80
                        targetPort: 80
                        nodePort: 30007
                    """
                    sh "echo '$deploymentYaml' > deployment.yaml"
                    sh "echo '$serviceYaml' > service.yaml"
                    sh 'ssh -i /var/test.pem -o StrictHostKeyChecking=no ubuntu@target_instance "kubectl apply -f -" < deployment.yaml'
                    sh 'ssh -i /var/test.pem -o StrictHostKeyChecking=no ubuntu@target_instance "kubectl apply -f -" < service.yaml'
                }
            }
        }
    }
    post {
        success {
            echo 'Deployment succeeded!'
        }
        failure {
            echo 'Deployment failed.'
        }
    }
}